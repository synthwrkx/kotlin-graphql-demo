schema {
  query: Query
  mutation: Mutation
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

interface People {
  name: String!
}

type Attendee implements People {
  name: String!
  ticket: TicketType!
}

"Great place to work"
type Conference {
  conferenceId: Int!
  name: String!
}

type Mutation {
  createStudent(studentInput: StudentDetailsInput!): [StudentDetails!]!
}

type Query {
  conference: Conference!
  people(namePrefix: String): [People!]!
  schedule: ScheduleDetails!
}

type ScheduleDetails {
  greetings: String!
  talks: [String!]!
}

type Speaker implements People {
  name: String!
  talks: [String!]!
}

type StudentDetails {
  age: Int!
  name: String!
}

enum TicketType {
  CONFERENCE
  FULL
  WORKSHOP
}

input StudentDetailsInput {
  age: Int!
  name: String!
}
